{"version":3,"sources":["components/SearchBar/SearchBar.module.css","components/ShowCards/ShowCards.module.css","App.module.css","components/ShowCards/Card/PersonCard.module.css","components/SearchBar/SearchBar.js","components/ShowCards/Card/PersonCard.js","components/ShowCards/ShowCards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","props","className","classes","onChange","changed","type","placeholder","Card","src","person","avatar","alt","first_name","PersonName","last_name","PersonEmail","email","ShowCards","filteredPersons","persons","filter","toLowerCase","indexOf","input","length","map","PersonCard","key","id","notShow","App","useState","personState","setPersonState","search","searchState","setSearchState","useEffect","axios","get","then","res","data","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,QAAU,6B,mBCA5BD,EAAOC,QAAU,CAAC,IAAM,mB,sDCAxBD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,WAAa,+BAA+B,YAAc,kC,kJCc7FC,EAZG,SAACC,GACjB,OACE,yBAAKC,UAAWC,IAAQH,WACtB,2BACEI,SAAUH,EAAMI,QAChBC,KAAK,QACLC,YAAY,sB,iCCcLC,EApBF,SAACP,GACZ,OACE,yBAAKC,UAAWC,IAAQK,MACtB,yBAAKC,IAAKR,EAAMS,OAAOC,OAAQC,IAAKX,EAAMS,OAAOG,aACjD,uBAAGX,UAAWC,IAAQW,YAAtB,QACQ,IACN,gCACGb,EAAMS,OAAOG,WADhB,IAC6BZ,EAAMS,OAAOK,YAG5C,uBAAGb,UAAWC,IAAQa,aAAtB,SACS,IACP,gCACE,4BAAKf,EAAMS,OAAOO,WCCbC,EAbG,SAACjB,GACjB,IAAIkB,EAAkBlB,EAAMmB,QAAQC,QAAO,SAACX,GAC1C,OAA0E,IAAnEA,EAAOO,MAAMK,cAAcC,QAAQtB,EAAMuB,MAAMF,kBAExD,OAAIH,EAAgBM,OAAS,EACpBN,EAAgBO,KAAI,SAAChB,GAC1B,OAAO,kBAACiB,EAAD,CAAYC,IAAKlB,EAAOmB,GAAInB,OAAQA,OAGtC,uBAAGR,UAAWC,IAAQ2B,SAAtB,sB,iBCoBIC,EA3BH,WAAO,IAAD,EACsBC,mBAAS,CAC7CZ,QAAS,KAFK,mBACTa,EADS,KACIC,EADJ,OAKsBF,mBAAS,CAC7CG,OAAQ,KANM,mBAKTC,EALS,KAKIC,EALJ,KAShBC,qBAAU,WACRC,IACGC,IAAI,sCACJC,MAAK,SAACC,GAAD,OAASR,EAAe,CAAEd,QAASsB,EAAIC,KAAKA,YACnD,IAKH,OACE,yBAAKzC,UAAWC,IAAQ4B,KACtB,+CACA,kBAAC,EAAD,CAAW1B,QANY,SAACuC,GAC1BP,EAAe,CAAEF,OAAQS,EAAMC,OAAOC,WAMpC,kBAAC,EAAD,CAAW1B,QAASa,EAAYb,QAASI,MAAOY,EAAYD,WChB9CY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3db800c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchBar\":\"SearchBar_SearchBar__257L8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notShow\":\"ShowCards_notShow__2dTbb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__t582T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"PersonCard_Card__3-W1O\",\"PersonName\":\"PersonCard_PersonName__OnKXi\",\"PersonEmail\":\"PersonCard_PersonEmail__1j7pP\"};","import React from \"react\";\r\nimport classes from \"./SearchBar.module.css\";\r\n\r\nconst SearchBar = (props) => {\r\n  return (\r\n    <div className={classes.SearchBar}>\r\n      <input\r\n        onChange={props.changed}\r\n        type=\"email\"\r\n        placeholder=\"Search email...\"\r\n      />\r\n      {/* <button>Search</button> */}\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport classes from \"./PersonCard.module.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={classes.Card}>\r\n      <img src={props.person.avatar} alt={props.person.first_name} />\r\n      <p className={classes.PersonName}>\r\n        Name:{\" \"}\r\n        <strong>\r\n          {props.person.first_name} {props.person.last_name}\r\n        </strong>\r\n      </p>\r\n      <p className={classes.PersonEmail}>\r\n        Email:{\" \"}\r\n        <strong>\r\n          <em>{props.person.email}</em>\r\n        </strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport classes from \"./ShowCards.module.css\";\r\nimport PersonCard from \"./Card/PersonCard\";\r\n\r\nconst ShowCards = (props) => {\r\n  let filteredPersons = props.persons.filter((person) => {\r\n    return person.email.toLowerCase().indexOf(props.input.toLowerCase()) !== -1;\r\n  });\r\n  if (filteredPersons.length > 0) {\r\n    return filteredPersons.map((person) => {\r\n      return <PersonCard key={person.id} person={person} />;\r\n    });\r\n  } else {\r\n    return <p className={classes.notShow}>No Persons found!</p>;\r\n  }\r\n};\r\n\r\nexport default ShowCards;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport ShowCards from \"./components/ShowCards/ShowCards\";\nimport classes from \"./App.module.css\";\n\nconst App = () => {\n  const [personState, setPersonState] = useState({\n    persons: [],\n  });\n\n  const [searchState, setSearchState] = useState({\n    search: \"\",\n  });\n\n  useEffect(() => {\n    axios\n      .get(\"https://reqres.in/api/users?page=1\")\n      .then((res) => setPersonState({ persons: res.data.data }));\n  }, []);\n\n  const inputSearchHandler = (event) => {\n    setSearchState({ search: event.target.value });\n  };\n  return (\n    <div className={classes.App}>\n      <header>Person Card</header>\n      <SearchBar changed={inputSearchHandler} />\n      <ShowCards persons={personState.persons} input={searchState.search} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}